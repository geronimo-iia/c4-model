{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#c4-model","title":"c4 model","text":"<p>Versions following Semantic Versioning</p>"},{"location":"#overview","title":"Overview","text":"<p>This module provide a simple C4 Metamodel implementation.</p> <p>See c4model.</p> <p>This project expose c4 resource: - Person - SoftwareSystem - Container - Component - CodeElement - RelationShip</p> <p>Each of them have: - an unique <code>arn</code> based on their type and name - an extended attributes (dict) - a <code>data</code> property to represent them as a dict, json etc... - a <code>from_resource</code> method to instanciate a resource from a dict</p> <p>Another class C4Manager, act as a container of c4 resource, with <code>lookup</code> facilities on resource's arn.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install this library directly into an activated virtual environment:</p> <pre><code>$ pip install c4-model\n</code></pre> <p>or add it to your Poetry project:</p> <pre><code>$ poetry add c4-model\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>After installation, the package can imported:</p> <pre><code>$ python\n&gt;&gt;&gt; import c4_model\n&gt;&gt;&gt; c4_model.__version__\n</code></pre> <p>See documentation for more detail on each resources.</p> <p>To create a <code>Person</code>, you can do:</p> <pre><code>from c4_model import Person\np = Person(name=\"p1\")\np.description = \"big boss\"\np.extended_attributes[\"qualifier\"] = \"vip\"\n\nprint(p.arn)\n\n&gt;&gt;&gt; \"arn:c4:person:7fd91543-6b1f-3a69-91b9-9ae50369fab3\"\n</code></pre> <p>or </p> <pre><code>from c4_model import Person\np = Person(name=\"p1\", description=\"big boss\", extended_attributes={\"qualifier\": \"vip\"})\n</code></pre> <p>To deal with dict:</p> <pre><code>from c4_model import Person\np = Person(name=\"p1\", description=\"big boss\", extended_attributes={\"qualifier\": \"vip\"})\n\np_as_dict = p.data\nprint(p_as_dict)\n\n&gt;&gt;&gt; {'name': 'p1', 'extended_attributes': {'qualifier': 'vip'}, 'description': 'big boss'}\n\n# load a resource\np2 = Person.from_resource(data=p_as_dict)\n\n# equality is here\nassert p == p2\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#change-log","title":"Change Log","text":""},{"location":"changelog/#100","title":"1.0.0","text":"<ul> <li>Project structure:<ul> <li>based on geronimo-iia/template-python</li> <li>add flakehell</li> <li>simplify makefile and minimize customization</li> <li>add github workflow</li> </ul> </li> <li>Add C4 entities and test unit</li> <li>Add Reference system and test unit</li> <li>Add a basic C4Manager</li> <li>Expose Reference and ModelReference</li> <li>Add lookup_relation_ship_with_XXXX on C4Manager</li> </ul>"},{"location":"code_of_conduct/","title":"Code of conduct","text":""},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or  advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic  address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a  professional setting</li> </ul>"},{"location":"code_of_conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at jguibert@gmail.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>This project is based on Geronimo-iaa's Python Template. This is a cookiecutter template for a typical Python library following modern packaging conventions.  It utilizes popular libraries to fully automate all development and deployment tasks.</p>"},{"location":"contributing/#setup","title":"Setup","text":""},{"location":"contributing/#requirements","title":"Requirements","text":"<p>You will need:</p> <ul> <li>Python 3.8\"+</li> <li>Pyenv</li> <li>poetry</li> <li>Make with find, sed</li> </ul>"},{"location":"contributing/#make-installation","title":"Make Installation","text":"<p>A powerfull tool: * macOS: <code>$ xcode-select --install</code> * Linux: https://www.gnu.org/software/make * Windows: https://mingw.org/download/installer</p>"},{"location":"contributing/#pyenv-installation","title":"Pyenv Installation","text":"<p>Pyenv will manage all our python version. Follow https://github.com/pyenv/pyenv#installation</p>"},{"location":"contributing/#python-installation","title":"Python Installation","text":"<p>Do:</p> <p><code>$ pyenv install 3.8</code></p> <p>Note for MacOS 10.14 user:</p> <p><code>bash     SDKROOT=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk MACOSX_DEPLOYMENT_TARGET=10.14 pyenv install 3.8</code></p>"},{"location":"contributing/#poetry-installation-httpspoetryeustaceiodocsinstallation","title":"Poetry Installation: https://poetry.eustace.io/docs/#installation","text":"<p>Poetry will manage our dependencies and create our virtual environment for us.</p>"},{"location":"contributing/#confirm-installation","title":"Confirm Installation","text":"<p>To confirm these system dependencies are configured correctly:</p> <pre><code>$ poetry --version\n\n$ poetry run python --version\n</code></pre>"},{"location":"contributing/#development-tasks","title":"Development Tasks","text":""},{"location":"contributing/#manual","title":"Manual","text":""},{"location":"contributing/#install-project-dependencies","title":"Install project dependencies","text":"<pre><code>$ make install\n</code></pre> <p>Note: - this target create a dummy file <code>.install</code>. The makefile rule depends on pyproject.toml and poetry.lock file - if for whatever reason, you have to force installation, just remove this <code>.install</code> file and execute a <code>make install</code></p>"},{"location":"contributing/#run-the-tests","title":"Run the tests","text":"<pre><code>$ make test\n</code></pre>"},{"location":"contributing/#run-static-analysis","title":"Run static analysis","text":"<pre><code>$ make check\n</code></pre>"},{"location":"contributing/#build-the-documentation","title":"Build the documentation","text":"<pre><code>$ make docs\n</code></pre>"},{"location":"contributing/#build-the-package","title":"Build the package","text":"<pre><code>$ make build\n</code></pre>"},{"location":"contributing/#obtain-help","title":"Obtain help","text":"<p>For help:</p> <pre><code>$ make help\n</code></pre>"},{"location":"contributing/#integration-with-visual-studio-code","title":"Integration With Visual Studio Code","text":"<p>Even if we use fabulous tool like pyenv, poetry, ... at the end, we just want to go on, and code.</p> <p>So here, few detail of my installation.</p> <ul> <li> <p>.bashrc     ```bash     # init pyenv with default python version     if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then     eval \"$(pyenv init -)\"     fi</p> </li> <li> <p>poetry configuration: all is let with default</p> </li> <li> <p>How Launch Visual Studio Code within virtual environment created by poetry ?     After do a <code>make install</code>, you have to do:     <code>bash     poetry shell     code .</code> <code>poetry shell</code> will activate project virtual environment.</p> </li> </ul>"},{"location":"contributing/#add-poetry-in-path","title":"add poetry in path","text":"<p>export PATH=\"$HOME/.poetry/bin:$PATH\"</p>"},{"location":"contributing/#add-visual-studio-code-code","title":"Add Visual Studio Code (code)","text":"<p>export PATH=\"$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin\" ```</p>"},{"location":"contributing/#continuous-integration","title":"Continuous Integration","text":"<p>The CI server will report overall build status:</p> <pre><code>$ make ci\n</code></pre>"},{"location":"contributing/#release-tasks","title":"Release Tasks","text":"<p>Release to PyPI:</p> <pre><code>$ make publish\n</code></pre>"},{"location":"license/","title":"License","text":""},{"location":"license/#license","title":"License","text":"<p>The MIT License (MIT)</p> <p>Copyright \u00a9 2020, Jerome Guibert</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"reference/","title":"Reference","text":"<p>This part of the project documentation focuses on an information-oriented approach. Use it as a reference for the technical implementation of the <code>c4_model</code> project code.</p> <p>c4 model definition.</p>"},{"location":"reference/#c4_model.BaseModel","title":"<code>BaseModel</code>  <code>dataclass</code>","text":"<p>Abstract c4 root model.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>model name.</p> Source code in <code>c4_model/definition.py</code> <pre><code>@dataclass\nclass BaseModel:\n\"\"\"Abstract c4 root model.\n\n    Attributes:\n        name (str): model name.\n    \"\"\"\n\n    name: str\n\n    @property\n    def provider(self):\n\"\"\"Return provider.\n\n        Returns:\n            (str): provider of this instance\n        \"\"\"\n        return PROVIDER_CODE\n\n    @property\n    def resource_type(self):\n\"\"\"Return resource type.\n\n        Returns:\n            (str): resource type of this instance\n        \"\"\"\n        return camel_to_snake(self.__class__.__name__)\n\n    @property\n    def resource_id(self):\n\"\"\"Return resource identifier.\n\n        Returns:\n            (str): resource identifierof this instance\n        \"\"\"\n        return get_resource_id(class_name=self.__class__.__name__, name=self.name)\n\n    @property\n    def data(self) -&gt; Dict:\n\"\"\"Return a dictionnary of this instance.\n\n        Returns:\n            (Dict): dictionnary of this instance.\n        \"\"\"\n        return asdict(self)\n\n    @property\n    def arn(self) -&gt; str:\n\"\"\"Return arn.\n\n        Returns:\n            (str): arn of this instance\n        \"\"\"\n        return get_arn(resource_type=self.resource_type, resource_id=self.resource_id)\n\n    def __hash__(self) -&gt; int:\n\"\"\"Compute hash.\n\n        Returns:\n           (int): a hash representation.\n        \"\"\"\n        return hash(self.resource_id)\n\n    def __eq__(self, other):\n\"\"\"Compare two instance of BaseModel.\n\n        Args:\n            other: other instance to compare.\n\n        Returns:\n            (bool): true if resource_id are equals, false either.\n        \"\"\"\n        if other:\n            return self.resource_id == other.resource_id if hasattr(other, \"resource_id\") else False\n        return False\n\n    @classmethod\n    def from_resource(cls, data: Dict) -&gt; \"BaseModel\":\n\"\"\"Instanciate a member of c4 model.\n\n        Args:\n            data (Dict): dictionnary of this instance.\n\n        Raises:\n            RuntimeError: base class always raise error.\n        \"\"\"\n        raise RuntimeError(\"Should not be called\")\n</code></pre>"},{"location":"reference/#c4_model.definition.BaseModel.arn","title":"<code>arn: str</code>  <code>property</code>","text":"<p>Return arn.</p> <p>Returns:</p> Type Description <code>str</code> <p>arn of this instance</p>"},{"location":"reference/#c4_model.definition.BaseModel.data","title":"<code>data: Dict</code>  <code>property</code>","text":"<p>Return a dictionnary of this instance.</p> <p>Returns:</p> Type Description <code>Dict</code> <p>dictionnary of this instance.</p>"},{"location":"reference/#c4_model.definition.BaseModel.provider","title":"<code>provider</code>  <code>property</code>","text":"<p>Return provider.</p> <p>Returns:</p> Type Description <code>str</code> <p>provider of this instance</p>"},{"location":"reference/#c4_model.definition.BaseModel.resource_id","title":"<code>resource_id</code>  <code>property</code>","text":"<p>Return resource identifier.</p> <p>Returns:</p> Type Description <code>str</code> <p>resource identifierof this instance</p>"},{"location":"reference/#c4_model.definition.BaseModel.resource_type","title":"<code>resource_type</code>  <code>property</code>","text":"<p>Return resource type.</p> <p>Returns:</p> Type Description <code>str</code> <p>resource type of this instance</p>"},{"location":"reference/#c4_model.definition.BaseModel.__eq__","title":"<code>__eq__(other)</code>","text":"<p>Compare two instance of BaseModel.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <p>other instance to compare.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>true if resource_id are equals, false either.</p> Source code in <code>c4_model/definition.py</code> <pre><code>def __eq__(self, other):\n\"\"\"Compare two instance of BaseModel.\n\n    Args:\n        other: other instance to compare.\n\n    Returns:\n        (bool): true if resource_id are equals, false either.\n    \"\"\"\n    if other:\n        return self.resource_id == other.resource_id if hasattr(other, \"resource_id\") else False\n    return False\n</code></pre>"},{"location":"reference/#c4_model.definition.BaseModel.__hash__","title":"<code>__hash__()</code>","text":"<p>Compute hash.</p> <p>Returns:</p> Type Description <code>int</code> <p>a hash representation.</p> Source code in <code>c4_model/definition.py</code> <pre><code>def __hash__(self) -&gt; int:\n\"\"\"Compute hash.\n\n    Returns:\n       (int): a hash representation.\n    \"\"\"\n    return hash(self.resource_id)\n</code></pre>"},{"location":"reference/#c4_model.definition.BaseModel.from_resource","title":"<code>from_resource(data)</code>  <code>classmethod</code>","text":"<p>Instanciate a member of c4 model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Dict</code> <p>dictionnary of this instance.</p> required <p>Raises:</p> Type Description <code>RuntimeError</code> <p>base class always raise error.</p> Source code in <code>c4_model/definition.py</code> <pre><code>@classmethod\ndef from_resource(cls, data: Dict) -&gt; \"BaseModel\":\n\"\"\"Instanciate a member of c4 model.\n\n    Args:\n        data (Dict): dictionnary of this instance.\n\n    Raises:\n        RuntimeError: base class always raise error.\n    \"\"\"\n    raise RuntimeError(\"Should not be called\")\n</code></pre>"},{"location":"reference/#c4_model.C4Manager","title":"<code>C4Manager</code>","text":"<p>         Bases: <code>UserDict</code></p> <p>C4Manager is an in memory dict of C4 Model.</p> Source code in <code>c4_model/manager.py</code> <pre><code>class C4Manager(UserDict):\n\"\"\"C4Manager is an in memory dict of C4 Model.\"\"\"\n\n    def __init__(self, data: Optional[Iterable[BaseModel]] = None):\n        super(C4Manager, self).__init__()\n        if data:\n            for item in data:\n                self.add(item)\n\n    def add(self, item: BaseModel) -&gt; BaseModel:\n\"\"\"Add a model.\"\"\"\n        self.data[item.arn] = item\n        return item\n\n    def lookup(self, arn_query: str) -&gt; Iterable[str]:\n\"\"\"Lookup arn key for specified query.\n\n        Args:\n            arn_query (str): an arn model to lookup for\n        Yields:\n            (str): arn model\n        \"\"\"\n        regex = re.compile(arn_query)\n        for key in self.data.keys():\n            if regex.search(key):\n                yield key\n\n    def lookup_children(self, parent: BaseModel) -&gt; Iterable[BaseModel]:\n\"\"\"Lookup children for specified parent.\n\n        Args:\n            parent_arn (BaseModel): parent\n\n        Returns:\n            (Iterable[BaseModel]): child's with specified parent arn\n        \"\"\"\n        return filter(\n            lambda item: hasattr(item, \"parent\") and parent == item.parent,  # type: ignore[attr-defined]\n            self.data.values(),\n        )\n\n    def lookup_person(self):\n\"\"\"Lookup for all person instance.\"\"\"\n        return self.lookup(arn_query=\"arn:c4:person:*\")\n\n    def lookup_software_system(self):\n\"\"\"Lookup for all software system instance.\"\"\"\n        return self.lookup(arn_query=\"arn:c4:software_system:*\")\n\n    def lookup_container(self):\n\"\"\"Lookup for all container instance.\"\"\"\n        return self.lookup(arn_query=\"arn:c4:container:*\")\n\n    def lookup_component(self):\n\"\"\"Lookup for all component instance.\"\"\"\n        return self.lookup(arn_query=\"arn:c4:component:*\")\n\n    def lookup_code_element(self):\n\"\"\"Lookup for all code element instance.\"\"\"\n        return self.lookup(arn_query=\"arn:c4:code_element:*\")\n\n    def lookup_relation_ship(self):\n\"\"\"Lookup for all relation ship instance.\"\"\"\n        return self.lookup(arn_query=\"arn:c4:relation_ship:*\")\n\n    def lookup_relation_ship_with_origin(self, origin: BaseModel) -&gt; RelationShip:\n\"\"\"Lookup for all relation ship instance with specified origin.\"\"\"\n        return filter(\n            lambda r: r.origin == origin,\n            (self[arn] for arn in self.lookup_relation_ship()),  # type: ignore[return-value]\n        )\n\n    def lookup_relation_ship_with_target(self, target: BaseModel) -&gt; RelationShip:\n\"\"\"Lookup for all relation ship instance with specified target.\"\"\"\n        return filter(\n            lambda r: r.target == target,\n            (self[arn] for arn in self.lookup_relation_ship()),  # type: ignore[return-value]\n        )\n</code></pre>"},{"location":"reference/#c4_model.manager.C4Manager.add","title":"<code>add(item)</code>","text":"<p>Add a model.</p> Source code in <code>c4_model/manager.py</code> <pre><code>def add(self, item: BaseModel) -&gt; BaseModel:\n\"\"\"Add a model.\"\"\"\n    self.data[item.arn] = item\n    return item\n</code></pre>"},{"location":"reference/#c4_model.manager.C4Manager.lookup","title":"<code>lookup(arn_query)</code>","text":"<p>Lookup arn key for specified query.</p> <p>Parameters:</p> Name Type Description Default <code>arn_query</code> <code>str</code> <p>an arn model to lookup for</p> required <p>Yields:</p> Type Description <code>str</code> <p>arn model</p> Source code in <code>c4_model/manager.py</code> <pre><code>def lookup(self, arn_query: str) -&gt; Iterable[str]:\n\"\"\"Lookup arn key for specified query.\n\n    Args:\n        arn_query (str): an arn model to lookup for\n    Yields:\n        (str): arn model\n    \"\"\"\n    regex = re.compile(arn_query)\n    for key in self.data.keys():\n        if regex.search(key):\n            yield key\n</code></pre>"},{"location":"reference/#c4_model.manager.C4Manager.lookup_children","title":"<code>lookup_children(parent)</code>","text":"<p>Lookup children for specified parent.</p> <p>Parameters:</p> Name Type Description Default <code>parent_arn</code> <code>BaseModel</code> <p>parent</p> required <p>Returns:</p> Type Description <code>Iterable[BaseModel]</code> <p>child's with specified parent arn</p> Source code in <code>c4_model/manager.py</code> <pre><code>def lookup_children(self, parent: BaseModel) -&gt; Iterable[BaseModel]:\n\"\"\"Lookup children for specified parent.\n\n    Args:\n        parent_arn (BaseModel): parent\n\n    Returns:\n        (Iterable[BaseModel]): child's with specified parent arn\n    \"\"\"\n    return filter(\n        lambda item: hasattr(item, \"parent\") and parent == item.parent,  # type: ignore[attr-defined]\n        self.data.values(),\n    )\n</code></pre>"},{"location":"reference/#c4_model.manager.C4Manager.lookup_code_element","title":"<code>lookup_code_element()</code>","text":"<p>Lookup for all code element instance.</p> Source code in <code>c4_model/manager.py</code> <pre><code>def lookup_code_element(self):\n\"\"\"Lookup for all code element instance.\"\"\"\n    return self.lookup(arn_query=\"arn:c4:code_element:*\")\n</code></pre>"},{"location":"reference/#c4_model.manager.C4Manager.lookup_component","title":"<code>lookup_component()</code>","text":"<p>Lookup for all component instance.</p> Source code in <code>c4_model/manager.py</code> <pre><code>def lookup_component(self):\n\"\"\"Lookup for all component instance.\"\"\"\n    return self.lookup(arn_query=\"arn:c4:component:*\")\n</code></pre>"},{"location":"reference/#c4_model.manager.C4Manager.lookup_container","title":"<code>lookup_container()</code>","text":"<p>Lookup for all container instance.</p> Source code in <code>c4_model/manager.py</code> <pre><code>def lookup_container(self):\n\"\"\"Lookup for all container instance.\"\"\"\n    return self.lookup(arn_query=\"arn:c4:container:*\")\n</code></pre>"},{"location":"reference/#c4_model.manager.C4Manager.lookup_person","title":"<code>lookup_person()</code>","text":"<p>Lookup for all person instance.</p> Source code in <code>c4_model/manager.py</code> <pre><code>def lookup_person(self):\n\"\"\"Lookup for all person instance.\"\"\"\n    return self.lookup(arn_query=\"arn:c4:person:*\")\n</code></pre>"},{"location":"reference/#c4_model.manager.C4Manager.lookup_relation_ship","title":"<code>lookup_relation_ship()</code>","text":"<p>Lookup for all relation ship instance.</p> Source code in <code>c4_model/manager.py</code> <pre><code>def lookup_relation_ship(self):\n\"\"\"Lookup for all relation ship instance.\"\"\"\n    return self.lookup(arn_query=\"arn:c4:relation_ship:*\")\n</code></pre>"},{"location":"reference/#c4_model.manager.C4Manager.lookup_relation_ship_with_origin","title":"<code>lookup_relation_ship_with_origin(origin)</code>","text":"<p>Lookup for all relation ship instance with specified origin.</p> Source code in <code>c4_model/manager.py</code> <pre><code>def lookup_relation_ship_with_origin(self, origin: BaseModel) -&gt; RelationShip:\n\"\"\"Lookup for all relation ship instance with specified origin.\"\"\"\n    return filter(\n        lambda r: r.origin == origin,\n        (self[arn] for arn in self.lookup_relation_ship()),  # type: ignore[return-value]\n    )\n</code></pre>"},{"location":"reference/#c4_model.manager.C4Manager.lookup_relation_ship_with_target","title":"<code>lookup_relation_ship_with_target(target)</code>","text":"<p>Lookup for all relation ship instance with specified target.</p> Source code in <code>c4_model/manager.py</code> <pre><code>def lookup_relation_ship_with_target(self, target: BaseModel) -&gt; RelationShip:\n\"\"\"Lookup for all relation ship instance with specified target.\"\"\"\n    return filter(\n        lambda r: r.target == target,\n        (self[arn] for arn in self.lookup_relation_ship()),  # type: ignore[return-value]\n    )\n</code></pre>"},{"location":"reference/#c4_model.manager.C4Manager.lookup_software_system","title":"<code>lookup_software_system()</code>","text":"<p>Lookup for all software system instance.</p> Source code in <code>c4_model/manager.py</code> <pre><code>def lookup_software_system(self):\n\"\"\"Lookup for all software system instance.\"\"\"\n    return self.lookup(arn_query=\"arn:c4:software_system:*\")\n</code></pre>"},{"location":"reference/#c4_model.CodeElement","title":"<code>CodeElement</code>  <code>dataclass</code>","text":"<p>         Bases: <code>ExtendedModel</code></p> <p>CodeElement Notation.</p> <p>Code elements (e.g. classes, interfaces, etc) that are used to implement the component in scope.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>model name.</p> <code>extended_attributes</code> <code>Dict[str, str]</code> <p>an optional dict of (string, string).</p> <code>description</code> <code>Optional[str]</code> <p>optional description.</p> <code>parent</code> <code>Optional[ComponentReference]</code> <p>optional Component parent.</p> Source code in <code>c4_model/code_element.py</code> <pre><code>@dataclass(eq=False)\nclass CodeElement(ExtendedModel):\n\"\"\"CodeElement Notation.\n\n    Code elements (e.g. classes, interfaces, etc) that are used to implement the component in scope.\n\n    Attributes:\n        name (str): model name.\n        extended_attributes (Dict[str, str]): an optional dict of (string, string).\n        description (Optional[str]): optional description.\n        parent (Optional[ComponentReference]): optional Component parent.\n    \"\"\"\n\n    parent: Optional[ComponentReference] = None\n    description: Optional[str] = None\n\n    def attach(self, name: str) -&gt; ComponentReference:\n\"\"\"Attach this code element to a component.\n\n        Args:\n            name (str): name of parent\n\n        Returns:\n            (ComponentReference): parent reference\n        \"\"\"\n        self.parent = ComponentReference(name)\n        return self.parent\n\n    @classmethod\n    def from_resource(cls, data: Dict) -&gt; \"CodeElement\":\n\"\"\"Instanciate a CodeElement.\n\n        Args:\n            data (Dict): dictionnary of this instance.\n\n        Returns:\n            (CodeElement): a CodeElement\n        \"\"\"\n        item = CodeElement(\n            name=data[\"name\"],\n            description=data.get(\"description\"),\n            extended_attributes=data.get(\"extended_attributes\", {}),\n        )\n        if \"parent\" in data and data[\"parent\"] and \"name\" in data[\"parent\"]:\n            item.attach(name=data[\"parent\"][\"name\"])\n        return item\n</code></pre>"},{"location":"reference/#c4_model.code_element.CodeElement.attach","title":"<code>attach(name)</code>","text":"<p>Attach this code element to a component.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of parent</p> required <p>Returns:</p> Type Description <code>ComponentReference</code> <p>parent reference</p> Source code in <code>c4_model/code_element.py</code> <pre><code>def attach(self, name: str) -&gt; ComponentReference:\n\"\"\"Attach this code element to a component.\n\n    Args:\n        name (str): name of parent\n\n    Returns:\n        (ComponentReference): parent reference\n    \"\"\"\n    self.parent = ComponentReference(name)\n    return self.parent\n</code></pre>"},{"location":"reference/#c4_model.code_element.CodeElement.from_resource","title":"<code>from_resource(data)</code>  <code>classmethod</code>","text":"<p>Instanciate a CodeElement.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Dict</code> <p>dictionnary of this instance.</p> required <p>Returns:</p> Type Description <code>CodeElement</code> <p>a CodeElement</p> Source code in <code>c4_model/code_element.py</code> <pre><code>@classmethod\ndef from_resource(cls, data: Dict) -&gt; \"CodeElement\":\n\"\"\"Instanciate a CodeElement.\n\n    Args:\n        data (Dict): dictionnary of this instance.\n\n    Returns:\n        (CodeElement): a CodeElement\n    \"\"\"\n    item = CodeElement(\n        name=data[\"name\"],\n        description=data.get(\"description\"),\n        extended_attributes=data.get(\"extended_attributes\", {}),\n    )\n    if \"parent\" in data and data[\"parent\"] and \"name\" in data[\"parent\"]:\n        item.attach(name=data[\"parent\"][\"name\"])\n    return item\n</code></pre>"},{"location":"reference/#c4_model.CodeElementReference","title":"<code>CodeElementReference</code>","text":"<p>         Bases: <code>Reference</code></p> <p>Code element reference.</p> Source code in <code>c4_model/code_element.py</code> <pre><code>class CodeElementReference(Reference):\n\"\"\"Code element reference.\"\"\"\n\n    def __init__(self, name: str):\n        super().__init__(c4_class_name=CodeElement.__name__, name=name)\n</code></pre>"},{"location":"reference/#c4_model.Component","title":"<code>Component</code>  <code>dataclass</code>","text":"<p>         Bases: <code>ExtendedModel</code></p> <p>Component Notation.</p> <p>The word \"component\" is a hugely overloaded term in the software development industry, but in this context a component is simply a grouping of related functionality encapsulated behind a well-defined interface. If you're using a language like Java or C#, the simplest way to think of a component is that it's a collection of implementation classes behind an interface. Aspects such as how those components are packaged (e.g. one component vs many components per JAR file, DLL, shared library, etc) is a separate and orthogonal concern.</p> <p>An important point to note here is that all components inside a container typically execute in the same process space.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>model name.</p> <code>extended_attributes</code> <code>Dict[str, str]</code> <p>an optional dict of (string, string).</p> <code>description</code> <code>Optional[str]</code> <p>optional description.</p> <code>parent</code> <code>Optional[ContainerReference]</code> <p>optional Container parent.</p> Source code in <code>c4_model/component.py</code> <pre><code>@dataclass(eq=False)\nclass Component(ExtendedModel):\n\"\"\"Component Notation.\n\n    The word \"component\" is a hugely overloaded term in the software development industry,\n    but in this context a component is simply a grouping of related functionality encapsulated\n    behind a well-defined interface.\n    If you're using a language like Java or C#, the simplest way to think of a component is that it's a collection\n    of implementation classes behind an interface.\n    Aspects such as how those components are packaged (e.g. one component vs many components per JAR file,\n    DLL, shared library, etc) is a separate and orthogonal concern.\n\n    An important point to note here is that all components inside a container typically execute\n    in the same process space.\n\n    Attributes:\n        name (str): model name.\n        extended_attributes (Dict[str, str]): an optional dict of (string, string).\n        description (Optional[str]): optional description.\n        parent (Optional[ContainerReference]): optional Container parent.\n    \"\"\"\n\n    parent: Optional[ContainerReference] = None\n    description: Optional[str] = None\n\n    def attach(self, name: str) -&gt; ContainerReference:\n\"\"\"Attach this component to a container.\n\n        Args:\n            name (str): name of parent\n\n        Returns:\n            (ContainerReference): parent reference\n        \"\"\"\n        self.parent = ContainerReference(name)\n        return self.parent\n\n    @classmethod\n    def from_resource(cls, data: Dict) -&gt; \"Component\":\n\"\"\"Instanciate a Component.\n\n        Args:\n            data (Dict): dictionnary of this instance.\n\n        Returns:\n            (Component): a Component instance.\n        \"\"\"\n        item = Component(\n            name=data[\"name\"],\n            description=data.get(\"description\"),\n            extended_attributes=data.get(\"extended_attributes\", {}),\n        )\n        if \"parent\" in data and data[\"parent\"] and \"name\" in data[\"parent\"]:\n            item.attach(name=data[\"parent\"][\"name\"])\n        return item\n</code></pre>"},{"location":"reference/#c4_model.component.Component.attach","title":"<code>attach(name)</code>","text":"<p>Attach this component to a container.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of parent</p> required <p>Returns:</p> Type Description <code>ContainerReference</code> <p>parent reference</p> Source code in <code>c4_model/component.py</code> <pre><code>def attach(self, name: str) -&gt; ContainerReference:\n\"\"\"Attach this component to a container.\n\n    Args:\n        name (str): name of parent\n\n    Returns:\n        (ContainerReference): parent reference\n    \"\"\"\n    self.parent = ContainerReference(name)\n    return self.parent\n</code></pre>"},{"location":"reference/#c4_model.component.Component.from_resource","title":"<code>from_resource(data)</code>  <code>classmethod</code>","text":"<p>Instanciate a Component.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Dict</code> <p>dictionnary of this instance.</p> required <p>Returns:</p> Type Description <code>Component</code> <p>a Component instance.</p> Source code in <code>c4_model/component.py</code> <pre><code>@classmethod\ndef from_resource(cls, data: Dict) -&gt; \"Component\":\n\"\"\"Instanciate a Component.\n\n    Args:\n        data (Dict): dictionnary of this instance.\n\n    Returns:\n        (Component): a Component instance.\n    \"\"\"\n    item = Component(\n        name=data[\"name\"],\n        description=data.get(\"description\"),\n        extended_attributes=data.get(\"extended_attributes\", {}),\n    )\n    if \"parent\" in data and data[\"parent\"] and \"name\" in data[\"parent\"]:\n        item.attach(name=data[\"parent\"][\"name\"])\n    return item\n</code></pre>"},{"location":"reference/#c4_model.ComponentReference","title":"<code>ComponentReference</code>","text":"<p>         Bases: <code>Reference</code></p> <p>Component reference.</p> Source code in <code>c4_model/component.py</code> <pre><code>class ComponentReference(Reference):\n\"\"\"Component reference.\"\"\"\n\n    def __init__(self, name: str):\n        super().__init__(c4_class_name=Component.__name__, name=name)\n</code></pre>"},{"location":"reference/#c4_model.Container","title":"<code>Container</code>  <code>dataclass</code>","text":"<p>         Bases: <code>ExtendedModel</code></p> <p>Container Notation.</p> <p>A container represents something that hosts code or data. A container is something that needs to be running in order for the overall software system to work.</p> <p>A container is essentially a context or boundary inside which some code is executed or some data is stored. And each container is a separately deployable/runnable thing or runtime environment, typically (but not always) running in its own process space. Because of this, communication between containers typically takes the form of an inter-process communication.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>model name.</p> <code>extended_attributes</code> <code>Dict[str, str]</code> <p>an optional dict of (string, string).</p> <code>description</code> <code>Optional[str]</code> <p>optional description.</p> <code>technology</code> <code>Optional[str]</code> <p>optional technology.</p> <code>parent</code> <code>Optional[SoftwareSystemReference]</code> <p>optional SoftwareSystem parent.</p> Source code in <code>c4_model/container.py</code> <pre><code>@dataclass(eq=False)\nclass Container(ExtendedModel):\n\"\"\"Container Notation.\n\n    A container represents something that hosts code or data.\n    A container is something that needs to be running in order for the overall software system to work.\n\n    A container is essentially a context or boundary inside which some code is executed or some data is stored.\n    And each container is a separately deployable/runnable thing or runtime environment,\n    typically (but not always) running in its own process space.\n    Because of this, communication between containers typically takes the form of an inter-process communication.\n\n    Attributes:\n        name (str): model name.\n        extended_attributes (Dict[str, str]): an optional dict of (string, string).\n        description (Optional[str]): optional description.\n        technology (Optional[str]): optional technology.\n        parent (Optional[SoftwareSystemReference]): optional SoftwareSystem parent.\n\n    \"\"\"\n\n    parent: Optional[SoftwareSystemReference] = None\n    technology: Optional[str] = None\n    description: Optional[str] = None\n\n    def attach(self, name: str) -&gt; SoftwareSystemReference:\n\"\"\"Attach this container to a software system.\n\n        Args:\n            name (str): name of parent\n\n        Returns:\n            (SoftwareSystemReference): parent reference\n        \"\"\"\n        self.parent = SoftwareSystemReference(name)\n        return self.parent\n\n    @classmethod\n    def from_resource(cls, data: Dict) -&gt; \"Container\":\n\"\"\"Instanciate a Container.\n\n        Args:\n            data (Dict): dictionnary of this instance.\n\n        Returns:\n            (Container): a Container instance.\n        \"\"\"\n        item = Container(\n            name=data[\"name\"],\n            technology=data.get(\"technology\"),\n            description=data.get(\"description\"),\n            extended_attributes=data.get(\"extended_attributes\", {}),\n        )\n        if \"parent\" in data and data[\"parent\"] and \"name\" in data[\"parent\"]:\n            item.attach(name=data[\"parent\"][\"name\"])\n        return item\n</code></pre>"},{"location":"reference/#c4_model.container.Container.attach","title":"<code>attach(name)</code>","text":"<p>Attach this container to a software system.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of parent</p> required <p>Returns:</p> Type Description <code>SoftwareSystemReference</code> <p>parent reference</p> Source code in <code>c4_model/container.py</code> <pre><code>def attach(self, name: str) -&gt; SoftwareSystemReference:\n\"\"\"Attach this container to a software system.\n\n    Args:\n        name (str): name of parent\n\n    Returns:\n        (SoftwareSystemReference): parent reference\n    \"\"\"\n    self.parent = SoftwareSystemReference(name)\n    return self.parent\n</code></pre>"},{"location":"reference/#c4_model.container.Container.from_resource","title":"<code>from_resource(data)</code>  <code>classmethod</code>","text":"<p>Instanciate a Container.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Dict</code> <p>dictionnary of this instance.</p> required <p>Returns:</p> Type Description <code>Container</code> <p>a Container instance.</p> Source code in <code>c4_model/container.py</code> <pre><code>@classmethod\ndef from_resource(cls, data: Dict) -&gt; \"Container\":\n\"\"\"Instanciate a Container.\n\n    Args:\n        data (Dict): dictionnary of this instance.\n\n    Returns:\n        (Container): a Container instance.\n    \"\"\"\n    item = Container(\n        name=data[\"name\"],\n        technology=data.get(\"technology\"),\n        description=data.get(\"description\"),\n        extended_attributes=data.get(\"extended_attributes\", {}),\n    )\n    if \"parent\" in data and data[\"parent\"] and \"name\" in data[\"parent\"]:\n        item.attach(name=data[\"parent\"][\"name\"])\n    return item\n</code></pre>"},{"location":"reference/#c4_model.ContainerReference","title":"<code>ContainerReference</code>","text":"<p>         Bases: <code>Reference</code></p> <p>Container reference.</p> Source code in <code>c4_model/container.py</code> <pre><code>class ContainerReference(Reference):\n\"\"\"Container reference.\"\"\"\n\n    def __init__(self, name: str):\n        super().__init__(c4_class_name=Container.__name__, name=name)\n</code></pre>"},{"location":"reference/#c4_model.ExtendedModel","title":"<code>ExtendedModel</code>  <code>dataclass</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>Add extended attributes.</p> <p>Attributes:</p> Name Type Description <code>extended_attributes</code> <code>Dict[str, str]</code> <p>an optional dict of (string, string)</p> Source code in <code>c4_model/definition.py</code> <pre><code>@dataclass(eq=False)\nclass ExtendedModel(BaseModel):\n\"\"\"Add extended attributes.\n\n    Attributes:\n        extended_attributes (Dict[str, str]): an optional dict of (string, string)\n    \"\"\"\n\n    extended_attributes: Dict[str, str] = field(default_factory=dict)\n</code></pre>"},{"location":"reference/#c4_model.ModelReference","title":"<code>ModelReference</code>","text":"<p>         Bases: <code>Enum</code></p> <p>Enumerate referencable model.</p> Source code in <code>c4_model/relation_ship.py</code> <pre><code>@unique\nclass ModelReference(Enum):\n\"\"\"Enumerate referencable model.\"\"\"\n\n    PERSON = (PersonReference, camel_to_snake(Person.__name__))\n    SOFTWARE_SYSTEM = (SoftwareSystemReference, camel_to_snake(SoftwareSystem.__name__))\n    CONTAINER = (ContainerReference, camel_to_snake(Container.__name__))\n    COMPONENT = (ComponentReference, camel_to_snake(Component.__name__))\n    CODE_ELEMENT = (CodeElementReference, camel_to_snake(CodeElement.__name__))\n\n    def create_reference(self, name: str):\n\"\"\"Create a reference instance for the specified name.\"\"\"\n        return self.value[0](name=name)\n\n    @classmethod\n    def from_name(cls, name: str) -&gt; \"ModelReference\":\n\"\"\"Find ModelReference instance for specified name.\n\n        Args:\n            name (str): c4 model name\n\n        Returns:\n            (ModelReference): the instance\n\n        Raises:\n            (RuntimeError): if no member is associated with the specified name.\n        \"\"\"\n        _upper_name = name.upper()\n        for model in ModelReference:\n            if model.name == _upper_name:\n                return model\n        raise RuntimeError(f\"{name} not found in ModelReference\")\n\n    @classmethod\n    def from_resource_type(cls, resource_type: str) -&gt; \"ModelReference\":\n\"\"\"Find ModelReference instance for specified resource type.\n\n        Args:\n            resource_type (str): c4 resource type name\n\n        Returns:\n            (ModelReference): the instance\n\n        Raises:\n            (RuntimeError): if no member is associated with the specified resource type.\n        \"\"\"\n        for model in ModelReference:\n            if model.value[1] == resource_type:\n                return model\n        raise RuntimeError(f\"{resource_type} not found in ModelReference\")\n</code></pre>"},{"location":"reference/#c4_model.relation_ship.ModelReference.create_reference","title":"<code>create_reference(name)</code>","text":"<p>Create a reference instance for the specified name.</p> Source code in <code>c4_model/relation_ship.py</code> <pre><code>def create_reference(self, name: str):\n\"\"\"Create a reference instance for the specified name.\"\"\"\n    return self.value[0](name=name)\n</code></pre>"},{"location":"reference/#c4_model.relation_ship.ModelReference.from_name","title":"<code>from_name(name)</code>  <code>classmethod</code>","text":"<p>Find ModelReference instance for specified name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>c4 model name</p> required <p>Returns:</p> Type Description <code>ModelReference</code> <p>the instance</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>if no member is associated with the specified name.</p> Source code in <code>c4_model/relation_ship.py</code> <pre><code>@classmethod\ndef from_name(cls, name: str) -&gt; \"ModelReference\":\n\"\"\"Find ModelReference instance for specified name.\n\n    Args:\n        name (str): c4 model name\n\n    Returns:\n        (ModelReference): the instance\n\n    Raises:\n        (RuntimeError): if no member is associated with the specified name.\n    \"\"\"\n    _upper_name = name.upper()\n    for model in ModelReference:\n        if model.name == _upper_name:\n            return model\n    raise RuntimeError(f\"{name} not found in ModelReference\")\n</code></pre>"},{"location":"reference/#c4_model.relation_ship.ModelReference.from_resource_type","title":"<code>from_resource_type(resource_type)</code>  <code>classmethod</code>","text":"<p>Find ModelReference instance for specified resource type.</p> <p>Parameters:</p> Name Type Description Default <code>resource_type</code> <code>str</code> <p>c4 resource type name</p> required <p>Returns:</p> Type Description <code>ModelReference</code> <p>the instance</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>if no member is associated with the specified resource type.</p> Source code in <code>c4_model/relation_ship.py</code> <pre><code>@classmethod\ndef from_resource_type(cls, resource_type: str) -&gt; \"ModelReference\":\n\"\"\"Find ModelReference instance for specified resource type.\n\n    Args:\n        resource_type (str): c4 resource type name\n\n    Returns:\n        (ModelReference): the instance\n\n    Raises:\n        (RuntimeError): if no member is associated with the specified resource type.\n    \"\"\"\n    for model in ModelReference:\n        if model.value[1] == resource_type:\n            return model\n    raise RuntimeError(f\"{resource_type} not found in ModelReference\")\n</code></pre>"},{"location":"reference/#c4_model.Person","title":"<code>Person</code>  <code>dataclass</code>","text":"<p>         Bases: <code>ExtendedModel</code></p> <p>Person Notation.</p> <p>However you think about your users (as actors, roles, personas, etc), people are the various human users of your software system. A person represents one of the human users of your software system (e.g. actors, roles, personas, etc).</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>model name.</p> <code>extended_attributes</code> <code>Dict[str, str]</code> <p>an optional dict of (string, string).</p> <code>description</code> <code>Optional[str]</code> <p>optional description.</p> Source code in <code>c4_model/person.py</code> <pre><code>@dataclass(eq=False)\nclass Person(ExtendedModel):\n\"\"\"Person Notation.\n\n    However you think about your users (as actors, roles, personas, etc),\n    people are the various human users of your software system.\n    A person represents one of the human users of your software system (e.g. actors, roles, personas, etc).\n\n    Attributes:\n        name (str): model name.\n        extended_attributes (Dict[str, str]): an optional dict of (string, string).\n        description (Optional[str]): optional description.\n    \"\"\"\n\n    description: Optional[str] = None\n\n    @classmethod\n    def from_resource(cls, data: Dict) -&gt; \"Person\":\n\"\"\"Instanciate a Person.\n\n        Args:\n            data (Dict): dictionnary of this instance.\n\n        Returns:\n            (Person): a Person instance.\n        \"\"\"\n        return Person(\n            name=data[\"name\"],\n            description=data.get(\"description\"),\n            extended_attributes=data.get(\"extended_attributes\", {}),\n        )\n</code></pre>"},{"location":"reference/#c4_model.person.Person.from_resource","title":"<code>from_resource(data)</code>  <code>classmethod</code>","text":"<p>Instanciate a Person.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Dict</code> <p>dictionnary of this instance.</p> required <p>Returns:</p> Type Description <code>Person</code> <p>a Person instance.</p> Source code in <code>c4_model/person.py</code> <pre><code>@classmethod\ndef from_resource(cls, data: Dict) -&gt; \"Person\":\n\"\"\"Instanciate a Person.\n\n    Args:\n        data (Dict): dictionnary of this instance.\n\n    Returns:\n        (Person): a Person instance.\n    \"\"\"\n    return Person(\n        name=data[\"name\"],\n        description=data.get(\"description\"),\n        extended_attributes=data.get(\"extended_attributes\", {}),\n    )\n</code></pre>"},{"location":"reference/#c4_model.PersonReference","title":"<code>PersonReference</code>","text":"<p>         Bases: <code>Reference</code></p> <p>Person reference.</p> Source code in <code>c4_model/person.py</code> <pre><code>class PersonReference(Reference):\n\"\"\"Person reference.\"\"\"\n\n    def __init__(self, name: str):\n        super().__init__(c4_class_name=Person.__name__, name=name)\n</code></pre>"},{"location":"reference/#c4_model.RelationShip","title":"<code>RelationShip</code>  <code>dataclass</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>RelationShip Notation.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>model name.</p> <code>origin</code> <code>Reference</code> <p>origin of this relationship</p> <code>target</code> <code>Reference</code> <p>target of this relationship</p> <code>description</code> <code>Optional[str]</code> <p>optional description</p> <code>technology</code> <code>Optional[str]</code> <p>optional technology</p> <code>extended_attributes</code> <code>Dict[str, str]</code> <p>optional extra attributes</p> Source code in <code>c4_model/relation_ship.py</code> <pre><code>@dataclass(eq=False)\nclass RelationShip(BaseModel):\n\"\"\"RelationShip Notation.\n\n    Attributes:\n        name (str): model name.\n        origin (Reference): origin of this relationship\n        target (Reference): target of this relationship\n        description (Optional[str]): optional description\n        technology (Optional[str]): optional technology\n        extended_attributes (Dict[str, str]): optional extra attributes\n    \"\"\"\n\n    origin: Reference\n    target: Reference\n    description: Optional[str] = None\n    technology: Optional[str] = None\n    extended_attributes: Dict[str, str] = field(default_factory=dict)\n\n    @classmethod\n    def from_resource(cls, data: Dict) -&gt; \"RelationShip\":\n\"\"\"Instanciate a RelationShip.\n\n        Args:\n            data (Dict): dictionnary of this instance.\n\n        Returns:\n            (RelationShip): a RelationShip instance.\n        \"\"\"\n        item = RelationShip(\n            name=data[\"name\"],\n            origin=ModelReference.from_resource_type(resource_type=data[\"origin\"][\"resource_type\"]).create_reference(\n                name=data[\"origin\"][\"name\"]\n            ),\n            target=ModelReference.from_resource_type(resource_type=data[\"target\"][\"resource_type\"]).create_reference(\n                name=data[\"target\"][\"name\"]\n            ),\n            description=data.get(\"description\"),\n            technology=data.get(\"technology\"),\n            extended_attributes=data.get(\"extended_attributes\", {}),\n        )\n        return item\n</code></pre>"},{"location":"reference/#c4_model.relation_ship.RelationShip.from_resource","title":"<code>from_resource(data)</code>  <code>classmethod</code>","text":"<p>Instanciate a RelationShip.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Dict</code> <p>dictionnary of this instance.</p> required <p>Returns:</p> Type Description <code>RelationShip</code> <p>a RelationShip instance.</p> Source code in <code>c4_model/relation_ship.py</code> <pre><code>@classmethod\ndef from_resource(cls, data: Dict) -&gt; \"RelationShip\":\n\"\"\"Instanciate a RelationShip.\n\n    Args:\n        data (Dict): dictionnary of this instance.\n\n    Returns:\n        (RelationShip): a RelationShip instance.\n    \"\"\"\n    item = RelationShip(\n        name=data[\"name\"],\n        origin=ModelReference.from_resource_type(resource_type=data[\"origin\"][\"resource_type\"]).create_reference(\n            name=data[\"origin\"][\"name\"]\n        ),\n        target=ModelReference.from_resource_type(resource_type=data[\"target\"][\"resource_type\"]).create_reference(\n            name=data[\"target\"][\"name\"]\n        ),\n        description=data.get(\"description\"),\n        technology=data.get(\"technology\"),\n        extended_attributes=data.get(\"extended_attributes\", {}),\n    )\n    return item\n</code></pre>"},{"location":"reference/#c4_model.SoftwareSystem","title":"<code>SoftwareSystem</code>  <code>dataclass</code>","text":"<p>         Bases: <code>ExtendedModel</code></p> <p>Software System Notation.</p> <p>A software system is the highest level of abstraction and describes something that delivers value to its users, whether they are human or not. This includes the software system you are modelling, and the other software systems upon which your software system depends (or vice versa).</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>model name.</p> <code>extended_attributes</code> <code>Dict[str, str]</code> <p>an optional dict of (string, string).</p> <code>description</code> <code>Optional[str]</code> <p>optional description.</p> Source code in <code>c4_model/software_system.py</code> <pre><code>@dataclass(eq=False)\nclass SoftwareSystem(ExtendedModel):\n\"\"\"Software System Notation.\n\n    A software system is the highest level of abstraction and describes something that delivers value to its users,\n    whether they are human or not.\n    This includes the software system you are modelling, and the other software systems upon which your software system\n    depends (or vice versa).\n\n    Attributes:\n        name (str): model name.\n        extended_attributes (Dict[str, str]): an optional dict of (string, string).\n        description (Optional[str]): optional description.\n\n    \"\"\"\n\n    description: Optional[str] = None\n\n    @classmethod\n    def from_resource(cls, data: Dict) -&gt; \"SoftwareSystem\":\n\"\"\"Instanciate a SoftwareSystem.\n\n        Args:\n            data (Dict): dictionnary of this instance.\n\n        Returns:\n            (SoftwareSystem): a SoftwareSystem instance.\n        \"\"\"\n        return SoftwareSystem(\n            name=data[\"name\"],\n            description=data.get(\"description\"),\n            extended_attributes=data.get(\"extended_attributes\", {}),\n        )\n</code></pre>"},{"location":"reference/#c4_model.software_system.SoftwareSystem.from_resource","title":"<code>from_resource(data)</code>  <code>classmethod</code>","text":"<p>Instanciate a SoftwareSystem.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Dict</code> <p>dictionnary of this instance.</p> required <p>Returns:</p> Type Description <code>SoftwareSystem</code> <p>a SoftwareSystem instance.</p> Source code in <code>c4_model/software_system.py</code> <pre><code>@classmethod\ndef from_resource(cls, data: Dict) -&gt; \"SoftwareSystem\":\n\"\"\"Instanciate a SoftwareSystem.\n\n    Args:\n        data (Dict): dictionnary of this instance.\n\n    Returns:\n        (SoftwareSystem): a SoftwareSystem instance.\n    \"\"\"\n    return SoftwareSystem(\n        name=data[\"name\"],\n        description=data.get(\"description\"),\n        extended_attributes=data.get(\"extended_attributes\", {}),\n    )\n</code></pre>"},{"location":"reference/#c4_model.SoftwareSystemReference","title":"<code>SoftwareSystemReference</code>","text":"<p>         Bases: <code>Reference</code></p> <p>SoftwareSystem reference.</p> Source code in <code>c4_model/software_system.py</code> <pre><code>class SoftwareSystemReference(Reference):\n\"\"\"SoftwareSystem reference.\"\"\"\n\n    def __init__(self, name: str):\n        super().__init__(c4_class_name=SoftwareSystem.__name__, name=name)\n</code></pre>"}]}